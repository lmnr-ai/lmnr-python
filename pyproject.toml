# Laminar Python

# If you are looking for information about possible extras installations,
# i.e. what you can pass into `pip install 'lmnr[extra1,extra2]'`, please see the
# `[project.optional-dependencies]` section below.

[project]
name = "lmnr"
version = "0.5.2"
description = "Python SDK for Laminar"
authors = [
  { name = "lmnr.ai", email = "founders@lmnr.ai" }
]
readme = "README.md"
requires-python = ">=3.9,<4"
license = "Apache-2.0"
dependencies = [
  "pydantic (>=2.0.3,<3.0.0)",
  "python-dotenv (>=1.0)",
  "opentelemetry-api (>=1.31.1)",
  "opentelemetry-sdk (>=1.31.1)",
  "opentelemetry-exporter-otlp-proto-http (>=1.31.1)",
  "opentelemetry-exporter-otlp-proto-grpc (>=1.31.1)",
  "opentelemetry-instrumentation-requests (>=0.52b0)",
  "opentelemetry-instrumentation-sqlalchemy (>=0.52b0)",
  "opentelemetry-instrumentation-urllib3 (>=0.52b0)",
  "opentelemetry-instrumentation-threading (>=0.52b0)",
  "opentelemetry-semantic-conventions-ai (>=0.4.2)",
  "tqdm (>=4.0)",
  "argparse (>=1.0)",
  "tenacity (>=8.0)",
  # explicitly freeze grpcio. Since 1.68.0, grpcio writes a warning message
  # that looks scary, but is harmless.
  # WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
  # E0000 00:00:1737439981.199902 9456033 init.cc:229] grpc_wait_for_shutdown_with_timeout() timed out.
  #
  # Related issue:
  # https://discuss.ai.google.dev/t/warning-all-log-messages-before-absl-initializelog-is-called-are-written-to-stderr-e0000-001731955515-629532-17124-init-cc-229-grpc-wait-for-shutdown-with-timeout-timed-out/50020
  # https://github.com/grpc/grpc/issues/38490
  "grpcio<1.68.0",
  "httpx>=0.25.0",
]

[project.scripts]
lmnr = "lmnr.cli:cli"

[project.optional-dependencies]
# List of all possible extras. You can specify one or more of these extras
# when installing the package, using any of the following examples:
# `pip install 'lmnr[anthropic,openai]'`
# `uv pip install 'lmnr[anthropic,openai]'`
# `uv add lmnr --extra anthropic --extra openai`
# `poetry add 'lmnr[anthropic,openai]'`

alephalpha=["opentelemetry-instrumentation-alephalpha>=0.39.2"]
anthropic=["opentelemetry-instrumentation-anthropic>=0.39.2"]
bedrock=["opentelemetry-instrumentation-bedrock>=0.39.2"]
chromadb=["opentelemetry-instrumentation-chromadb>=0.39.2"]
cohere=["opentelemetry-instrumentation-cohere>=0.39.2"]
google-generativeai=["opentelemetry-instrumentation-google-generativeai>=0.39.2"]
groq=["opentelemetry-instrumentation-groq>=0.39.2"]
haystack=["opentelemetry-instrumentation-haystack>=0.39.2"]
lancedb=["opentelemetry-instrumentation-lancedb>=0.39.2"]
langchain=["opentelemetry-instrumentation-langchain>=0.39.2"]
llamaindex=["opentelemetry-instrumentation-llamaindex>=0.39.2"]
marqo=["opentelemetry-instrumentation-marqo>=0.39.2"]
milvus=["opentelemetry-instrumentation-milvus>=0.39.2"]
mistralai=["opentelemetry-instrumentation-mistralai>=0.39.2"]
ollama=["opentelemetry-instrumentation-ollama>=0.39.2"]
openai=["opentelemetry-instrumentation-openai>=0.39.2"]
pinecone=["opentelemetry-instrumentation-pinecone>=0.39.2"]
qdrant=["opentelemetry-instrumentation-qdrant>=0.39.2"]
replicate=["opentelemetry-instrumentation-replicate>=0.39.2"]
sagemaker=["opentelemetry-instrumentation-sagemaker>=0.39.2"]
together=["opentelemetry-instrumentation-together>=0.39.2"]
transformers=["opentelemetry-instrumentation-transformers>=0.39.2"]
vertexai=["opentelemetry-instrumentation-vertexai>=0.39.2"]
watsonx=["opentelemetry-instrumentation-watsonx>=0.39.2"]
weaviate=["opentelemetry-instrumentation-weaviate>=0.39.2"]
# `all` is the group added for convenience, if you want to install all
# the instrumentations.
all = [
  "opentelemetry-instrumentation-alephalpha>=0.39.2",
  "opentelemetry-instrumentation-anthropic>=0.39.2",
  "opentelemetry-instrumentation-bedrock>=0.39.2",
  "opentelemetry-instrumentation-chromadb>=0.39.2",
  "opentelemetry-instrumentation-cohere>=0.39.2",
  "opentelemetry-instrumentation-google-generativeai>=0.39.2",
  "opentelemetry-instrumentation-groq>=0.39.2",
  "opentelemetry-instrumentation-haystack>=0.39.2",
  "opentelemetry-instrumentation-lancedb>=0.39.2",
  "opentelemetry-instrumentation-langchain>=0.39.2",
  "opentelemetry-instrumentation-llamaindex>=0.39.2",
  "opentelemetry-instrumentation-marqo>=0.39.2",
  "opentelemetry-instrumentation-milvus>=0.39.2",
  "opentelemetry-instrumentation-mistralai>=0.39.2",
  "opentelemetry-instrumentation-ollama>=0.39.2",
  "opentelemetry-instrumentation-openai>=0.39.2",
  "opentelemetry-instrumentation-pinecone>=0.39.2",
  "opentelemetry-instrumentation-qdrant>=0.39.2",
  "opentelemetry-instrumentation-replicate>=0.39.2",
  "opentelemetry-instrumentation-sagemaker>=0.39.2",
  "opentelemetry-instrumentation-together>=0.39.2",
  "opentelemetry-instrumentation-transformers>=0.39.2",
  "opentelemetry-instrumentation-vertexai>=0.39.2",
  "opentelemetry-instrumentation-watsonx>=0.39.2",
  "opentelemetry-instrumentation-weaviate>=0.39.2"
]

[dependency-groups]
dev = [
  "autopep8",
  "flake8",
  "pytest>=8.3.5",
  "pytest-sugar>=1.0.0",
  "pytest-asyncio>=0.26.0",
  "playwright>=1.51.0"
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
# we can move to uv_build, once it's more stable
# https://github.com/astral-sh/uv/issues/3957
# requires = ["uv_build>=0.6.16,<0.7"]
# build-backend = "uv_build"
